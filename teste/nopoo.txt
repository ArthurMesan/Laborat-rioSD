-- Quartus Prime VHDL Template
-- Unsigned Adder/Subtractor

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity unsigned_adder_subtractor is

	generic
	(
		DATA_WIDTH : natural := 8
	);

	port 
	(
		a		: in unsigned ((DATA_WIDTH-1) downto 0);
		b		: in unsigned ((DATA_WIDTH-1) downto 0);
		add_sub : in std_logic;
		result	: out unsigned ((DATA_WIDTH-1) downto 0)
	);

end entity;

architecture rtl of unsigned_adder_subtractor is
begin

	process(a,b,add_sub)
	begin
		-- add if "add_sub" is 1, else subtract
		if (add_sub = '1') then
			result <= a + b;
		else
			result <= a - b;
		end if;
	end process;

end rtl;


LIBRARY IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity maquina is
    port ( INPUT : in std_logic_vector(3 downto 0);
			  finaliza : in std_logic; --verifica nenhuma entrada sera mais setada
           OUTPUT : out std_logic_vector(3 downto 0);
			  clock : in std_logic;
			  reset : in std_logic;
			  i : in std_logic; --verifica se é para somar ou subtrair 1 soma 0 subtrai
			  estado : out std_logic_vector(3 downto 0);
			  
        );
end maquina;

architecture arch OF maquina is
		TYPE State_type IS (A, B, C, D);
		SIGNAL y : State_type := A;
		--variable x : std_logic;
		--variable soma : integer;
		
begin
	process (reset, clock, finaliza, i)
		variable x : std_logic;
		variable soma : integer;
		begin
			if reset = '1' then
			y <= A;
			elsif (Clock'EVENT AND Clock = '1') then
				CASE y IS
					WHEN A =>
						soma := 0;
						y <= B;
						estado <= "0000";
					WHEN B =>
						estado <= "0001";
						if not(INPUT = "0000") then
							x := '1';
						else 
							x := '0';
						end if;
						if x = '1'  then
							y <= B;
						elsif (x and (not finaliza)) = '1' then
							y <= C;
						else
							y <= D;
						end if;
					WHEN C =>
						estado <= "0100";
						if i = '1' then
						soma := soma + to_integer(unsigned(INPUT));
						else
						soma := soma - to_integer(unsigned(INPUT));
						end if;
						y <= B;
						
					WHEN D =>
						estado <= "1000";
						if soma /= 0 then
							output <= std_logic_vector(to_unsigned(soma, 4));
						else
							output <= INPUT;
						end if;
						y <= A;
						
						
						
				END CASE;
			END IF;
		END PROCESS;
	 
end arch ;



LIBRARY IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tb_maquina is
end tb_maquina;

architecture arch of tb_maquina is

component maquina is
	port ( INPUT : in std_logic_vector(3 downto 0);
			  finaliza : in std_logic; --verifica nenhuma entrada sera mais setada
           OUTPUT : out std_logic_vector(3 downto 0);
			  clock : in std_logic;
			  reset : in std_logic;
			  i : in std_logic; --verifica se é para somar ou subtrair 1 soma 0 subtrai
			  estado : out std_logic_vector(3 downto 0)
        );
end component;

signal INPUT, OUTPUT, estado : std_logic_vector(3 downto 0);
signal finaliza, reset, i : std_logic;
signal clock : std_logic := '0';

begin
instancia_maquina : maquina port map(INPUT => INPUT, OUTPUT => OUTPUT, finaliza => finaliza, clock => clock, reset => reset, i => i, estado => estado);
	clock <= NOT clock after 5 ns;
	INPUT <= "0000", "0001" after 5 ns, "0010" after 10 ns;
	finaliza <= '0' after 5 ns, '1' after 15 ns;
	reset <= '0';
	i <= '1';
end arch;

LIBRARY IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity registrador is
    port ( entrada : in std_logic_vector(3 downto 0);
           saida : out std_logic_vector(3 downto 0);
			  clock : in std_logic;
			  reset : in std_logic;
			  lg : in std_logic
        );
end registrador;

architecture arch of regitrador is

begin

registrador : process (clock, reset)
begin
	-- Reset whenever the reset signal goes low, regardless of the clock
	if (reset = '0') then
		saida <= '0';
	-- If not resetting, update the register output on the clock's rising edge
	elsif (rising_edge(clock)) and lg then
		saida <= entrada;
	end if;
end process;
end arch;


LIBRARY IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity datapath is
    port ( INPUT : in std_logic_vector(3 downto 0);
           OUTPUT : out std_logic_vector(3 downto 0);
			  clock : in std_logic;
			  reset : in std_logic;
			  i : in std_logic;
			  val_ld : in std_logic;
			  sum_ld : in std_logic;
			  out_ld : in std_logic;
        );
end datapath;

architecture arch OF datapath is

component registrador is
    port ( entrada : in std_logic_vector(3 downto 0);
           saida : out std_logic_vector(3 downto 0);
			  clock : in std_logic;
			  reset : in std_logic;
			  lg : in std_logic
        );
end component;

component unsigned_adder_subtractor is

	generic
	(
		DATA_WIDTH : natural := 4
	);

	port 
	(
		a		: in unsigned ((DATA_WIDTH-1) downto 0);
		b		: in unsigned ((DATA_WIDTH-1) downto 0);
		add_sub : in std_logic;
		result	: out unsigned ((DATA_WIDTH-1) downto 0)
	);

end component;

signal val_, res_, soma_ : std_logic_vector(3 downto 0);
signal clock : std_logic;

begin

instancia_unsigned_adder_subtractor : unsigned_adder_subtractor port map(a => soma_, b => val_, add_sub => i, result => res_);
instancia_registrador_val : registrador port map(entrada => INPUT, saida => val_, clock => clock, reset => reset, lg => val_ld);
instancia_registrador_res_out : registrador port map(entrada => soma_, saida => OUTPUT, clock => clock, reset => reset, lg => out_ld);
instancia_registrador_soma : registrador port map(entrada => res_, saida => soma_, clock => clock, reset => reset, lg => sum_ld);


end arch;
